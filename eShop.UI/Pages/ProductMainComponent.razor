@using eShop.API.DTO.DTOs
@using eShop.UI.Storage.Services
@inject IMapper mapper

<main>
    <div class="d-flex mb-3">
        @*Write out how many cars are being shown on the page*@
        <span>Showing @Service?.Products.Count cars</span>
    </div>

    <div class="row d-flex flex-wrap">
        @foreach (var product in Service!.Products)
        {
            <div class="card col-md-3 m-3" style="width: 20rem;">
                <img src="@product.PictureUrl" alt="Placeholder image for a car" class="pt-3 card-img-top">
                <div class="card-body">
                    <h5 class="card-title">@product.Name</h5>
                    <h6>@product.Year</h6>
                    <p class="card-text">@product.Description.Truncate(50)</p>
                </div>
                
                @*Added card-footer with colour filters and Add to cart button*@

                <div class="d-flex card-footer bg-white g-0 justify-content-start">
                    <div class="btn-group mx-2" role="group" aria-label="Basic radio toggle button group">
                        @foreach (var colour in product.Colours!)
                        {
                            <input type="radio" class="btn-check" name="color-@product.Id-@colour.Id" id="color-@product.Id-@colour.Id"
                                   autocomplete="off" @onclick="() => OnColorClick(product, colour)">
                            <label class="btn btn-sm btn-outline-dark pt-2"
                                   style="background-color: #@colour.BkColorHex ; color: #@(colour.IsSelected ? colour.ColorHex : colour.BkColorHex)"
                                   for="color-@product.Id-@colour.Id"><i class="bi-check"></i></label>
                        }
                    </div>
                    <button class="btn btn-sm btn-success" @onclick="() => AddToCart(product)"><i class="bi-cart"></i></button>
                </div>
            </div>
        }
    </div>
</main>



@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }

    // Set the category to 1 when loading page for first time
    protected override async Task OnInitializedAsync()
    {
        if (Service is not null)
        {
            Service.CurrentCategoryId = 1;
            await Service.GetProductsAsync();
        }
    }

    // Added Colour filters on products
    void OnColorClick(CarGetDTO product, ColourGetDTO colour)
    {
        product.Colours!.ForEach(c => c.IsSelected = false);
        colour.IsSelected = true;
    }

    async Task AddToCart(CarGetDTO product)
    {


        var cartItem = mapper.Map<CartItemDTO>(product);
        cartItem.Colour = product.Colours!.FirstOrDefault(c => c.IsSelected);

        // If no Colour is selected, just choose an avaiailable one
        if(cartItem.Colour == null)
            cartItem.Colour = product.Colours!.FirstOrDefault();

        Service!.CartItems.Add(cartItem);
        await Service!.SaveToStorage("CartItems", Service!.CartItems);


        //TODO: Spara flera produkter till shopping cart
        //TODO: Visa produkterna i shopping carten
        //TODO: Ta bort produkt från shopping cart
        //await Storage.SetAsync("MyKey", product);
        //var prod = await Storage.GetAsync<ProductGetDTO>("MyKey");
        //await Storage.RemoveAsync("MyKey");

        //var product = Service!.Products.Single(p => p.Id == id);
    }
}
