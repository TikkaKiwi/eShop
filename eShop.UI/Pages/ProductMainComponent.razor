@using eShop.API.DTO.DTOs
@using eShop.UI.Storage.Services
@inject IMapper mapper

<main>
    <div class="d-flex mb-3">
        @*Write out how many cars are being shown on the page*@
        <span>Showing @FilteredList.Count cars</span>
    </div>

    <div class="d-flex">
        <div class="dropdown" onclick="toggleDropdown('brandDropdown')">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="brandDropdown" aria-haspopup="true" aria-expanded="false">
                Car Brands
            </button>
            <div class="dropdown-menu" id="brandDropdownMenu">
                @foreach (var brand in Service!.Products.Select(p => p.Brand).DistinctBy(b => b?.Id))
                {
                    <a class="dropdown-item @(brand?.Id == BrandFilter?.Id ? "fas fa-angle-right" : "")" href="" @onclick="() => OnBrandFilterClick(brand)">@brand?.BrandName</a>
                }
            </div>
        </div>

        <div class="dropdown ml-2 ms-2" onclick="toggleDropdown('modelDropdown')">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="modelDropdown" aria-haspopup="true" aria-expanded="false">
                Car Models
            </button>
            <div class="dropdown-menu" id="modelDropdownMenu">
                @foreach (var model in Service!.Products.Select(p => p.Model).DistinctBy(m => m?.Id))
                {
                    <a class="dropdown-item @(model?.Id == ModelFilter?.Id ? "fas fa-angle-right" : "")" href="" @onclick="() => OnModelFilterClick(model)">@model?.ModelName</a>
                }
            </div>
        </div>

        <div class="dropdown ml-2 ms-2" onclick="toggleDropdown('fuelDropdown')">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="fuelDropdown" aria-haspopup="true" aria-expanded="false">
                Car Fuels
            </button>
            <div class="dropdown-menu" id="fuelDropdownMenu">
                @foreach (var fuel in Service!.Products.SelectMany(p => p.Fuels).DistinctBy(f => f?.Id))
                {
                    <a class="dropdown-item @(fuel?.Id == FuelFilter?.Id ? "fas fa-angle-right" : "")" href="" @onclick="() => OnFuelFilterClick(fuel)">@fuel?.FuelName</a>
                }

            </div>
        </div>
    </div>

    <div class="row d-flex flex-wrap">
        @foreach (var product in FilteredList)
        {
            <div class="card col-md-3 m-3" style="width: 20rem;">
                <img src="@product.PictureUrl" alt="Placeholder image for a car" class="pt-3 card-img-top">
                <div class="card-body">
                    <h5 class="card-title">@product.Name @product.Brand!.BrandName</h5>
                    <h6>@product.Year</h6>
                    <p class="card-text">@product.Description.Truncate(50)</p>
                </div>
                
                @*Added card-footer with colour filters and Add to cart button*@

                <div class="d-flex card-footer bg-white g-0 justify-content-start">
                    <div class="btn-group" role="group" aria-label="Basic radio toggle button group">
                        @foreach (var fuel in product.Fuels!)
                        {
                            <input type="radio" class="btn-check" name="btnradio-@product.Id" id="fuel-@product.Id-@fuel.Id" 
                                   autocomplete="off" @onclick="() => OnFuelClick(product, fuel)" checked>
                            <label class="btn btn-outline-dark btn-radio" for="fuel-@product.Id-@fuel.Id">@fuel.FuelName</label>
                        }
                    </div>

                    <div class="btn-group mx-2" role="group" aria-label="Basic radio toggle button group">
                        @foreach (var color in product.Colours!)
                        {
                            <input type="radio" class="btn-check" name="color-@product.Id-@color.Id" id="color-@product.Id-@color.Id"
                                   autocomplete="off" @onclick="() => OnColorClick(product, color)">
                            <label class="btn btn-sm btn-outline-dark pt-2"
                                   style="background-color: #@color.BkColorHex ; color: #@(color.IsSelected ? @color.ColorHex : @color.BkColorHex)"
                                   for="color-@product.Id-@color.Id"><i class="bi-check"></i></label>
                        }
                            
                    </div>

                    <button class="btn btn-sm btn-success" @onclick="() => AddToCart(product)"><i class="bi-cart"></i></button>
                </div>
            </div>
        }
    </div>
</main>

<script>
    function toggleDropdown(dropdownId) {
        var dropdownMenu = document.getElementById(dropdownId + 'Menu');
        dropdownMenu.classList.toggle('show');
    }

    // Close the dropdown if the user clicks outside of it
    window.onclick = function (event) {
        if (!event.target.matches('.btn-secondary')) {
            var dropdowns = document.getElementsByClassName('dropdown-menu');
            for (var i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                }
            }
        }
    }
</script>

@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    public BrandGetDTO? BrandFilter = null;
    public ModelGetDTO? ModelFilter = null;
    public FuelGetDTO? FuelFilter = null;
    public List<CarGetDTO> FilteredList = [];

    // Set the category to 1 when loading page for first time
    protected override async Task OnInitializedAsync()
    {
        if (Service is not null)
        {
            Service.CurrentCategoryId = 1;
            FilteredList = Service.Products;
            await Service.GetProductsAsync();
        }
    }

    protected override void OnParametersSet()
    {
        FilteredList = Service!.Products;
        BrandFilter = null;
        ModelFilter = null;
        FuelFilter = null;
    }

    void FilterList()
    {
        FilteredList = Service!.Products
            .Where(prod =>
                (BrandFilter == null || prod.Brand?.Id == BrandFilter.Id) &&
                (ModelFilter == null || prod.Model?.Id == ModelFilter.Id) &&
                (FuelFilter == null || prod.Fuels?.Any(f => f?.Id == FuelFilter.Id) == true))
            .ToList();
    }


    void OnBrandFilterClick(BrandGetDTO? brand)
    {
        if (brand?.Id == BrandFilter?.Id)
            BrandFilter = null;
        else
            BrandFilter = brand;

        FilterList();
    }

    void OnModelFilterClick(ModelGetDTO? model)
    {
        if (model?.Id == ModelFilter?.Id)
            ModelFilter = null;
        else
            ModelFilter = model;

        FilterList();
    }

    void OnFuelFilterClick(FuelGetDTO fuel)
    {
        if (fuel?.Id == FuelFilter?.Id)
            FuelFilter = null;
        else
            FuelFilter = fuel;

        FilterList();
    }

    void OnFuelClick(CarGetDTO product, FuelGetDTO fuel)
    {
        product.Fuels!.ForEach(f => f.IsSelected = false);
        fuel.IsSelected = true;
    }

    // Added Colour filters on products
    void OnColorClick(CarGetDTO product, ColourGetDTO colour)
    {
        product.Colours!.ForEach(c => c.IsSelected = false);
        colour.IsSelected = true;
    }

    async Task AddToCart(CarGetDTO product)
    {
        var cartItem = mapper.Map<CartItemDTO>(product);
        cartItem.Colour = product.Colours!.FirstOrDefault(c => c.IsSelected);
        cartItem.Fuel = product.Fuels!.FirstOrDefault(f => f.IsSelected);
        cartItem.Brand = product.Brand;
        cartItem.Model = product.Model;

        // If no Colour is selected, just choose an avaiailable one
        if(cartItem.Colour == null)
            cartItem.Colour = product.Colours!.FirstOrDefault();

        // If no Fuel is selected, just choose an avaiailable one
        if(cartItem.Fuel == null)
            cartItem.Fuel = product.Fuels!.FirstOrDefault();

        Service!.CartItems.Add(cartItem);
        await Service!.SaveToStorage("CartItems", Service!.CartItems);

        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync();

        //TODO: Spara flera produkter till shopping cart
        //TODO: Visa produkterna i shopping carten
        //TODO: Ta bort produkt från shopping cart
        //await Storage.SetAsync("MyKey", product);
        //var prod = await Storage.GetAsync<ProductGetDTO>("MyKey");
        //await Storage.RemoveAsync("MyKey");

        //var product = Service!.Products.Single(p => p.Id == id);
    }
}
