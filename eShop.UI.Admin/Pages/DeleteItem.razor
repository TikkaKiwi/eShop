<!-- Modal -->
<div class="modal fade" id="delete" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModalLabel">@ConfirmMessage</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex justify-content-center align-items-center flex-column">
                @if (!ShowSuccessMessage)
                {
                    <img src="@SelectedProductImage" alt="Placeholder image for a car" class="mb-4" style="max-height: 150px;">
                    <button class="btn btn-danger" @onclick="() => DeleteProduct()">Confirm</button>
                }
                else
                {
                    <div class="alert alert-success" role="alert">
                        Product deleted successfully!
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@code
{
    [CascadingParameter(Name = "Service")] public UIAdminService? Service { get; set; }
    public string? ConfirmMessage { get; set; }
    public CarGetDTO? SelectedProduct { get; set; }
    public string? SelectedProductImage { get; set; }
    public bool ShowSuccessMessage { get; set; } = false;

    public EventCallback<CarGetDTO> OnProductSelected { get; set; }
    [Parameter]
    public EventCallback<CarGetDTO> ProductDeleted { get; set; }


    public async Task ShowDeleteConfirmation(CarGetDTO product)
    {
        SelectedProduct = product;
        SelectedProductImage = product.PictureUrl;
        ConfirmMessage = $"Are you sure you want to delete {product.Name}?";
        await OnProductSelected.InvokeAsync(product);
        StateHasChanged(); // Add this line
    }

    private async Task DeleteProduct()
    {
        if (SelectedProduct != null)
        {
            await Service!.DeleteProductAsync(SelectedProduct.Id);
            ShowSuccessMessage = true;
            await ProductDeleted.InvokeAsync(SelectedProduct);
            SelectedProduct = null; // Reset after deletion
            StateHasChanged(); // Ensure the component re-renders to show the success message
        }
    }
}