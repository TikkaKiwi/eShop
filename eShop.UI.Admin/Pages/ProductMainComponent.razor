﻿@using eShop.UI.Admin.Extensions
<CascadingValue Value="Service" Name="Service">
<DeleteItem ProductDeleted="OnProductDeleted" @ref="deleteItemComponent" />
<EditItem ProductEdited="OnProductEdited" @ref="editItemComponent" />
<AddItem ProductAdded="OnProductAdd" @ref="addItemComponent"/>
</CascadingValue>
<section>
    <h6>Cars in Database: @Service!.Products.Count</h6>

    <div class="d-flex">
        <div class="dropdown" onclick="toggleDropdown('brandDropdown')">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="brandDropdown" aria-haspopup="true" aria-expanded="false">
                Car Brands
            </button>
            <div class="dropdown-menu" id="brandDropdownMenu">
                @if(Service is not null && Service.Products is not null)
                {
                    @foreach (var brand in Service!.Products.Select(p => p.Brand).DistinctBy(b => b?.Id))
                    {

                        <a class="dropdown-item @(brand?.Id == BrandFilter?.Id ? "fas fa-angle-right" : "")" href="" @onclick="() => OnBrandFilterClick(brand)">@brand?.BrandName</a>
                    }
                }
            </div>
        </div>

        <div class="dropdown ml-2 ms-2" onclick="toggleDropdown('modelDropdown')">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="modelDropdown" aria-haspopup="true" aria-expanded="false">
                Car Models
            </button>
            <div class="dropdown-menu" id="modelDropdownMenu">
                @foreach (var model in Service!.Products.Select(p => p.Model).DistinctBy(m => m?.Id))
                {
                    <a class="dropdown-item @(model?.Id == ModelFilter?.Id ? "fas fa-angle-right" : "")" href="" @onclick="() => OnModelFilterClick(model)">@model?.ModelName</a>
                }
            </div>
        </div>

        <div class="dropdown ml-2 ms-2" onclick="toggleDropdown('fuelDropdown')">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="fuelDropdown" aria-haspopup="true" aria-expanded="false">
                Car Fuels
            </button>
            <div class="dropdown-menu" id="fuelDropdownMenu">
                @foreach (var fuel in Service!.Products.SelectMany(p => p.Fuels).DistinctBy(f => f?.Id))
                {
                    <a class="dropdown-item @(fuel?.Id == FuelFilter?.Id ? "fas fa-angle-right" : "")" href="" @onclick="() => OnFuelFilterClick(fuel)">@fuel?.FuelName</a>
                }

            </div>
        </div>
        <button type="button" data-bs-toggle="modal" data-bs-target="#add" class="ms-auto border border-2 border-primary" @onclick="() => ShowAddModal()">ADD CAR</button>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th scope="col">Image</th>
            <th scope="col">Model</th>
            <th scope="col">Brand</th>
            <th scope="col">Year</th>
            <th scope="col">Fuel</th>
            <th scope="col">Description</th>
        </tr>
        </thead>
        <tbody>
        @foreach(var product in FilteredList)
        {

            <tr>
                    <th scope="row"><img src="https://localhost:7045/@product.PictureUrl" alt="Placeholder image for a car" class="position-relative top-0 end-0" style="max-height:50px"></th>
                <td>@product.Model!.ModelName</td>
                <td>@product.Brand!.BrandName</td>
                <td>@product.Year</td>
                <td>
                    <div class="border border-3 rounded px-2">
                        @foreach (var fuel in product.Fuels)
                        {
                            <div>@fuel.FuelName</div>
                        }
                    </div>
                </td>
                <td>@product.Description.Truncate(30)</td>
                <td>
                    <button type="button" data-bs-toggle="modal" data-bs-target="#edit" class="border border-2 border-warning" @onclick="() => ShowEditModal(product)">EDIT</button>
                    <button type="button" data-bs-toggle="modal" data-bs-target="#delete" class="border border-2 border-danger" @onclick="() => ShowDeleteModal(product)">DELETE</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</section>

<script>
    function toggleDropdown(dropdownId) {
        var dropdownMenu = document.getElementById(dropdownId + 'Menu');
        dropdownMenu.classList.toggle('show');
    }

    // Close the dropdown if the user clicks outside of it
    window.onclick = function (event) {
        if (!event.target.matches('.btn-secondary')) {
            var dropdowns = document.getElementsByClassName('dropdown-menu');
            for (var i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                }
            }
        }
    }
</script>

@code{
    [CascadingParameter(Name = "Service")] public UIAdminService? Service { get; set; }
    public BrandGetDTO? BrandFilter = null;
    public ModelGetDTO? ModelFilter = null;
    public FuelGetDTO? FuelFilter = null;
    public List<CarGetDTO> FilteredList = [];
    private DeleteItem? deleteItemComponent;
    private EditItem? editItemComponent;
    private AddItem? addItemComponent;

    protected override async Task OnInitializedAsync()
    {
        if (Service is not null)
        {
            await Service.GetProductsAsync();
        }
    }

    private async Task ShowAddModal()
    {
        if(addItemComponent != null)
        {
            await addItemComponent.ShowAddConfirmation();
        }
    }

    private void OnProductAdd(CarPostDTO product)
    {
        //If you want the page to automatically show the new Item

        //Service!.Products.Add(product);
        //StateHasChanged();
    }

    private async Task ShowEditModal(CarGetDTO product)
    {
        if (editItemComponent != null)
        {
            await editItemComponent.ShowEditConfirmation(product);
        }
    }

    private void OnProductEdited(CarGetDTO product)
    {
        // Update the product in the list
        var index = Service!.Products.FindIndex(p => p.Id == product.Id);
        if (index != -1)
        {
            Service!.Products[index] = product;
        }

        StateHasChanged(); // Re-render the component to reflect the changes
    }

    private async Task ShowDeleteModal(CarGetDTO product)
    {
        if (deleteItemComponent != null)
        {
            await deleteItemComponent.ShowDeleteConfirmation(product);
            // Use JS Interop to show the modal, or trigger it directly from your component
            // e.g., await JS.InvokeVoidAsync("bootstrap.Modal.getInstance", "#delete").show();
        }
    }

    private void OnProductDeleted(CarGetDTO product)
    {
        // Remove the deleted product from the list
        Service?.Products.Remove(product);
        StateHasChanged(); // Re-render the component to reflect the changes
    }

    protected override void OnParametersSet()
    {
        FilteredList = Service!.Products;
        BrandFilter = null;
        ModelFilter = null;
        FuelFilter = null;
    }

    void FilterList()
    {
        FilteredList = Service!.Products
            .Where(prod =>
                (BrandFilter == null || prod.Brand?.Id == BrandFilter.Id) &&
                (ModelFilter == null || prod.Model?.Id == ModelFilter.Id) &&
                (FuelFilter == null || prod.Fuels?.Any(f => f?.Id == FuelFilter.Id) == true))
            .ToList();
    }


    void OnBrandFilterClick(BrandGetDTO? brand)
    {
        if (brand?.Id == BrandFilter?.Id)
            BrandFilter = null;
        else
            BrandFilter = brand;

        FilterList();
    }

    void OnModelFilterClick(ModelGetDTO? model)
    {
        if (model?.Id == ModelFilter?.Id)
            ModelFilter = null;
        else
            ModelFilter = model;

        FilterList();
    }

    void OnFuelFilterClick(FuelGetDTO fuel)
    {
        if (fuel?.Id == FuelFilter?.Id)
            FuelFilter = null;
        else
            FuelFilter = fuel;

        FilterList();
    }
}